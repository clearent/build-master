#!/bin/bash

set -e

cd $(dirname $0)/..
export PATH=$(pwd)/build-tools/bin:$PATH
. ./scripts/common-vars

# hacking this...
if [ -f /opt/cattle/cattle/Dockerfile ]; then
    cd /opt/cattle/cattle
    git checkout -- Dockerfile
    cd -
fi

./scripts/git-manager

wrapdocker > /dev/null 2>&1

# Need to pull any updates
docker pull rancher/server:beta
# Try and clean up to save space
docker rmi $(docker images -aq -f 'dangling=true') || true
docker ps -a |grep -v mysql| grep -v ^CONTAINER|awk '{print $1}'|xargs docker rm -v ||true

if [ "$(docker ps -aq -f 'name=mysql-data-container'|wc -l)" -eq "0" ]; then
    docker run -d --name=mysql-data-container rancher/server:beta /bin/true
fi


./scripts/build-projects

RUN_ARGS="$RUN_ARGS -v $(pwd)/${PROJECT_MAP[NODE_AGENT_WORK_DIR]}:$(pwd)/${PROJECT_MAP[NODE_AGENT_WORK_DIR]}"
RUN_ARGS="$RUN_ARGS -v $(pwd)/${PROJECT_MAP[PYTHON_AGENT_WORK_DIR]}:$(pwd)/${PROJECT_MAP[PYTHON_AGENT_WORK_DIR]}"
RUN_ARGS="$RUN_ARGS -v $(pwd)/${PROJECT_MAP[HOST_API_WORK_DIR]}:$(pwd)/${PROJECT_MAP[HOST_API_WORK_DIR]}"
RUN_ARGS="$RUN_ARGS --volumes-from=mysql-data-container"
RUN_ARGS="$RUN_ARGS -e CATTLE_AGENT_PACKAGE_PYTHON_AGENT_URL=$(pwd)/${PROJECT_MAP[PYTHON_AGENT_WORK_DIR]}"
RUN_ARGS="$RUN_ARGS -e CATTLE_AGENT_PACKAGE_HOST_API_URL=$(pwd)/${PROJECT_MAP[HOST_API_WORK_DIR]}"
RUN_ARGS="$RUN_ARGS -e CATTLE_AGENT_PACKAGE_NODE_AGENT_URL=$(pwd)/${PROJECT_MAP[NODE_AGENT_WORK_DIR]}"
RUN_ARGS="$RUN_ARGS -e CATTLE_API_UI_INDEX=${CATTLE_UI_URL}"
RUN_ARGS="$RUN_ARGS -e CATTLE_HTTP_PORT=8080"
RUN_ARGS="$RUN_ARGS -e CATTLE_IDEMPOTENT_CHECKS=${CATTLE_IDEMPOTENT_CHECKS}"
RUN_ARGS="$RUN_ARGS -e BOOTSTRAP_ON_RUN=true"
RUN_ARGS="$RUN_ARGS -p 0.0.0.0:8080:8080"


cd ./cattle
cat > Dockerfile <<EOF
FROM rancher/server:beta
WORKDIR /source
CMD ["echo", "Run a Command"]
EOF
wrap "$RUN_ARGS" run
